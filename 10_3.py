# -*- coding: utf-8 -*-
"""10.3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T2OvD9D1AAGOcpchEopHjYfWZHY3TPds
"""

# Загрузим все необходимые библиотеки
import os
import numpy as np
import pandas as pd

import plotly as py
import plotly.io as pio
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot




url='https://drive.google.com/file/d/1sf3DVRxJwKTN0pAASXKjEZsW8EqZ04Wu/view?usp=sharing'
url='https://drive.google.com/uc?id=' + url.split('/')[-2]
df1 = pd.read_csv(url)
df = df1.drop(labels=['Original'], axis=1)

print(df.head())

df.isnull().sum()

"""Построим пару графиков для статистического анализа"""

import matplotlib.pyplot as plt
import seaborn as sns

figure, axes = plt.subplots(3, 5, figsize=(20, 14))
figure.suptitle("Data Distribution")
axes = axes.flatten()
ax = sns.countplot(data=df, x='Sex', hue='Sex', ax=axes[0], width=0.4, palette="coolwarm_r")
ax.set_ylabel('Count')
for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()),
        ha='center', va='center', xytext=(0, 10), textcoords='offset points')
count = 1
columns = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
for col in columns:
    sns.histplot(data=df, x=col, hue='Sex', bins=20, kde=True, ax=axes[count])
    count += 1
plt.tight_layout()

df['Sex'] = df['Sex'].apply(lambda x: 1 if x == 'F' else 0)

"""Тренируем нейронку и проверяем"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split


x_df = df.copy()
x_df = x_df.drop(labels=['BodyFat'], axis=1)
y_df = df['BodyFat']
X_train, X_test, y_train, y_test = train_test_split(x_df,
                                                    y_df,
                                                    shuffle=True,
                                                    test_size=0.2)


print(X_train.head())



n = LinearRegression()
n.fit(X_train, y_train)
y_pred = n.predict(X_test)
#print(y_test.to_list() ,'                          asdsadasdasdsadsadasmkjjjjjjjjjjjjjjjjjjjj               ',  y_pred)
#a = (0.1 > y_test - y_pred > 0.1).sum().item()
r2_score(y_test, y_pred)
#for i in range(len(y_test.to_list())):
#  print(y_test.to_list()[i] - y_pred[i])

plt.scatter(y_pred, y_test)
plt.plot([0, 38], [0, 38], color = 'green')
plt.xlabel('Predicted Body Fat')
plt.ylabel('True Body Fat')

"""Себя померил"""

Sex = '0'
Age = 25
Weight  = 81.7
Height  = 1.77
Neck  = 40
Chest  = 107
Abdomen = 93
Hip  = 93
Thigh  = 60
Knee = 41
Ankle  = 23
Biceps  = 39
Forearm  = 30
Wrist  = 19.5

res  = {'Sex': [Sex], 'Age': [Age], 'Weight': [Weight], 'Height': [Height], 'Neck': [Neck], 'Chest': [Chest], 'Abdomen': [Abdomen], 'Hip': [Hip], 'Thigh': [Thigh], 'Knee': [Knee], 'Ankle': [Ankle],
        'Biceps': [Biceps], 'Forearm': [Forearm], 'Wrist': [Wrist]}

# Create DataFrame
res = pd.DataFrame(res)

y_pred = n.predict(res)
print(y_pred)

"""Нейросеть получилась удачной, плюс минус то что есть то и ответила"""